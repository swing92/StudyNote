Spring 2024.03.06

1.Controller 메소드의 파라미터 타입으로 지정할 수 있는 객체와 annotation
  (@RequestMapping annotation이 적용 된 컨트롤러 메소드의 파라미터에 사용 가능)
	> HttpServletRequest / HttpServletResponse : 요청/응답을 처리하기 위한 서블릿 API
	> HttpSession : HTTP 세션을 위한 서블릿 API
	> org.springframework.ui.Model / ModelMap / java.util.Map : view에 model데이터를 전달하기 위한 모델 객체
	> 커맨드 객체(VO, DTO) : 요청 데이터를 저장할 객체
	> Errors, BindingResult : 검증 결과를 저장할 객체, 커맨드 객체 바로 뒤에 위치시켜야 함
	> @RequestParam : HTTP 요청 파라미터의 값을 메소드의 파라미터로 맵핑하기 위한 annotation
	> @RequestHeader : HTTP 요청 헤더의 값을 파라미터로 받기 위한 annotation
	> @RequestCookie : Cookie 데이터를 파라미터로 받기 위한 annotation
	> @RequestVariable : RESTful API 방식의 파라미터를 받기 위한 경로 변수 설정 annotation
	> @RequestBody : 요청 몸체의 데이터를 자바 객체로 변환하기 위한 annotation
						 String이나 JSON으로 넘어오는 요청 몸체의 데이터를 자바 객체로 변환하기 위해 사용하는 annotation
	
2.Controller 매소드의 반환 타입으로 지정할 수 있는 객체와 annotation
	> String : 뷰 이름을 반환할 때 메소드의 반환 타입으로 지정
	> void : 컨트롤러의 메소드에서 직접 응답데이터를 작성할 경우 지정
	> ModelAndView : 모델과 뷰 정보를 함께 반환해야 할 경우 지정
					 이전의 컨트로러는 스프링이 지원하는 Controller 인터페이스를 구현해야 했는데 이 때 많이 사용하던 반환타입
	> 자바 객체 : 메소드에 @ResponseBody가 적용된 경우나 메소드에서 반환되는 객체를 JSON 또는 XML과 같은 양식으로 반환할 경우 사용


@RequestParam : 요청 파라미터와 메소드의 파라미터 이름이 다른 경우 사용
				매소드의 파라미터 앞에 @RequestParam("요청 파라미터 이름") 이렇게 써주면 됨
				@RequestParam을 사용해 요청 파라미터 이름을 지정하면 얘가 앞에 붙은 매개변수에 요청 파라미터 값을 바인딩 시켜줌
				@RequestParam에 사용할 수 있는 속성
					> value : HTTP 요청 파라미터의 이름을 지정
					> required : 요청 파라미터가 필수인지 설정하는 속성
								 기본 값은 true
								 이 값이 true인 상태에서 요청 파라미터의 값이 존재하지 않으면 Exception 발생
					> defaultValue : 요청 파라미터가 없을 경우 사용할 기본 값을 문자열로 지정
				요청 파라미터 값을 읽어와 Controller 메소드의 파라미터 타입에 맞게 변환해줌(변환할 수 없는 경우 400에러 발생)
				@RequestMapping이 적용된 Controller 메소드의 파라미터 이름과 요청 파라미터의 이름이 같은 경우에는 @RequestParam 지정 안해도 됨
				
		